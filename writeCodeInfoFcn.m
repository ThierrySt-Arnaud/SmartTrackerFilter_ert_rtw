% Autogenerated file: Mon Jan 10 16:35:00 2022
function writeCodeInfoFcn


% Load a ComponentInterface object from IR
codeIRInfoStruct = load('/Users/thierry/Documents/MATLAB/smarttracker/SmartTrackerFilter_ert_rtw/tlc/codeIRInfo.mat');
codeInfo = codeIRInfoStruct.codeInfo;



wr = coder.internal.writeDataInterfacesToCodeDescriptor("SmartTrackerFilter","/Users/thierry/Documents/MATLAB/smarttracker/SmartTrackerFilter_ert_rtw") ;

fr = coder.internal.writeFunctionInterfacesToCodeDescriptor("SmartTrackerFilter", "/Users/thierry/Documents/MATLAB/smarttracker/SmartTrackerFilter_ert_rtw") ;



skippedParameters = [];

  tmpParams = [];








wr.closeRepo();

    tmpArgs         = [];
tmpActualArgs   = [];
tmpRet          = coder.types.Argument.empty;
tmpActualReturn = RTW.DataInterface.empty;
  
        
      
% Opaque Data Type
type_RTModel  = coder.types.Opaque;
       type_RTModel.Identifier = 'RT_MODEL';
      

% Pointer Type: Pointer to type_RTModel    
Ptrtype_RTModel_1_0 = coder.types.Pointer;
   Ptrtype_RTModel_1_0.BaseType = type_RTModel;
    Ptrtype_RTModel_1_0.ReadOnly = 1;
    Ptrtype_RTModel_1_0.Volatile = 0;
    
    
% Variable: Var_RTModel
Var_RTModel = RTW.Variable(type_RTModel, 'rtM_');
    Var_RTModel.Owner           = '';
    Var_RTModel.DeclarationFile = '';
    
    
% Pointer Variable: PtrVar_RTModel
PtrVar_RTModel = RTW.PointerVariable(Ptrtype_RTModel_1_0, 'rtM', Var_RTModel);
    
    
% Data Interface: idata_RTModel
    empty_timing = RTW.TimingInterface.empty;
idata_RTModel = RTW.DataInterface('', 'RTModel', PtrVar_RTModel, empty_timing);
    
    
        Initialize_RTArg = coder.types.Argument;
        Initialize_RTArg.Type   = Ptrtype_RTModel_1_0;
        Initialize_RTArg.Name   = 'rtM';
        Initialize_RTArg.IOType = 'INPUT_OUTPUT';    
        
        tmpArgs    = [tmpArgs, Initialize_RTArg];
        tmpActualArgs = [tmpActualArgs, idata_RTModel];

      
% Opaque Data Type
type_DWork  = coder.types.Opaque;
       type_DWork.Identifier = 'DW';
      

% Pointer Type: Pointer to type_DWork    
Ptrtype_DWork_0_0 = coder.types.Pointer;
   Ptrtype_DWork_0_0.BaseType = type_DWork;
    Ptrtype_DWork_0_0.ReadOnly = 0;
    Ptrtype_DWork_0_0.Volatile = 0;
    
    
% Variable: Var_rt_DWork
Var_rt_DWork = RTW.Variable(type_DWork, 'rtDW');
    Var_rt_DWork.Owner           = '';
    Var_rt_DWork.DeclarationFile = '';
    
   
  
    % Structure Element: StructElem_PointerExpr_rt_DWork
    StructElem_PointerExpr_rt_DWork = coder.types.AggregateElement;
    StructElem_PointerExpr_rt_DWork.Identifier = 'dwork';
    StructElem_PointerExpr_rt_DWork.Type = Ptrtype_DWork_0_0;
    
    
    % Pointer Expression: PointerExpr_rt_DWork
    PointerExpr_rt_DWork = RTW.PointerExpression(StructElem_PointerExpr_rt_DWork, PtrVar_RTModel, Var_rt_DWork);
    
    
       
    
% Data Interface: idata_rt_DWork
    empty_timing = RTW.TimingInterface.empty;
idata_rt_DWork = RTW.DataInterface('', 'Block states', PointerExpr_rt_DWork, empty_timing);
    
  
  

    

  Initialize_Prototype = coder.types.Prototype;
  Initialize_Prototype.Arguments  = tmpArgs;
  Initialize_Prototype.Return     = tmpRet;
    Initialize_Prototype.HeaderFile = ['SmartTrackerFilter', '.h'];
  Initialize_Prototype.SourceFile = ['SmartTrackerFilter', '.c'];

  Initialize_Interface = RTW.FunctionInterface;
  Initialize_Interface.Prototype    = Initialize_Prototype;
  Initialize_Interface.ActualArgs   = tmpActualArgs;
  Initialize_Interface.ActualReturn = tmpActualReturn;

      Initialize_Prototype.Name = 'SmartTrackerFilter_initialize';
  time_constant = codeInfo.TimingProperties(getIndexFromTimingInternalId(codeInfo.TimingInternalIds, -1));
      Initialize_Interface.Timing = time_constant;
      codeInfo.InitializeFunctions =  [codeInfo.InitializeFunctions, Initialize_Interface'];

          tmpArgs         = [];
tmpActualArgs   = [];
tmpRet          = coder.types.Argument.empty;
tmpActualReturn = RTW.DataInterface.empty;
  
        
    
        OutputUpdate_RTArg = coder.types.Argument;
        OutputUpdate_RTArg.Type   = Ptrtype_RTModel_1_0;
        OutputUpdate_RTArg.Name   = 'rtM';
        OutputUpdate_RTArg.IOType = 'INPUT_OUTPUT';    
        
        tmpArgs    = [tmpArgs, OutputUpdate_RTArg];
        tmpActualArgs = [tmpActualArgs, idata_RTModel];

   
       
                
% Built-In Type: 1
Type_1_R0_V0 = coder.types.Single;
  Type_1_R0_V0.Name = 'single';
  Type_1_R0_V0.Identifier = 'real32_T';
  Type_1_R0_V0.ReadOnly   = 0;
  Type_1_R0_V0.Volatile   = 0;
    
  % Matrix Type
  Type_21_R0_V0 = coder.types.Matrix;
  Type_21_R0_V0.BaseType   = Type_1_R0_V0;
    Type_21_R0_V0.Dimensions = [8];
            OutputUpdate_EI0Arg = coder.types.Argument;
        OutputUpdate_EI0Arg.Type = Type_21_R0_V0;
        OutputUpdate_EI0Arg.Name = 'rtU_rawAccelIn';
        codeInfo.Inports(0+1).Implementation.Identifier = 'rtU_rawAccelIn';
        tmpArgs    = [tmpArgs, OutputUpdate_EI0Arg];
        tmpActualArgs = [tmpActualArgs, codeInfo.Inports(0+1)];
      
  % Matrix Type
  Type_25_R0_V0 = coder.types.Matrix;
  Type_25_R0_V0.BaseType   = Type_1_R0_V0;
    Type_25_R0_V0.Dimensions = [1, 1];
    
% Pointer Type: Pointer to Type_25_R0_V0    
PtrType_25_R0_V0_0_0 = coder.types.Pointer;
   PtrType_25_R0_V0_0_0.BaseType = Type_25_R0_V0;
    PtrType_25_R0_V0_0_0.ReadOnly = 0;
    PtrType_25_R0_V0_0_0.Volatile = 0;
    
        OutputUpdate_EO0Arg = coder.types.Argument;
        OutputUpdate_EO0Arg.Type = PtrType_25_R0_V0_0_0;
        OutputUpdate_EO0Arg.Name = 'rtY_speedOut';
        OutputUpdate_EO0Arg.IOType = 'OUTPUT';
        codeInfo.Outports(0+1).Implementation.Identifier = 'rtY_speedOut'; 
        
tmpArgs    = [tmpArgs, OutputUpdate_EO0Arg];
tmpActualArgs = [tmpActualArgs, codeInfo.Outports(0+1)];
        OutputUpdate_EO1Arg = coder.types.Argument;
        OutputUpdate_EO1Arg.Type = PtrType_25_R0_V0_0_0;
        OutputUpdate_EO1Arg.Name = 'rtY_gravOut';
        OutputUpdate_EO1Arg.IOType = 'OUTPUT';
        codeInfo.Outports(1+1).Implementation.Identifier = 'rtY_gravOut'; 
        
tmpArgs    = [tmpArgs, OutputUpdate_EO1Arg];
tmpActualArgs = [tmpActualArgs, codeInfo.Outports(1+1)];
  
  

    

  OutputUpdate_Prototype = coder.types.Prototype;
  OutputUpdate_Prototype.Arguments  = tmpArgs;
  OutputUpdate_Prototype.Return     = tmpRet;
    OutputUpdate_Prototype.HeaderFile = ['SmartTrackerFilter', '.h'];
  OutputUpdate_Prototype.SourceFile = ['SmartTrackerFilter', '.c'];

  OutputUpdate_Interface = RTW.FunctionInterface;
  OutputUpdate_Interface.Prototype    = OutputUpdate_Prototype;
  OutputUpdate_Interface.ActualArgs   = tmpActualArgs;
  OutputUpdate_Interface.ActualReturn = tmpActualReturn;

        OutputUpdate_Prototype.Name = 'SmartTrackerFilter_step';
  time_0 = codeInfo.TimingProperties(getIndexFromTimingInternalId(codeInfo.TimingInternalIds, 0));
      OutputUpdate_Interface.Timing = time_0;
      codeInfo.OutputFunctions =  [codeInfo.OutputFunctions, OutputUpdate_Interface'];

          
         
    
      

  



if ~isempty(skippedParameters)
codeInfo.Parameters(skippedParameters) = [];
end

codeInfo.InternalData = [codeInfo.InternalData, idata_RTModel];
codeInfo.InternalData(end+1) = idata_rt_DWork;

% Handling Right-Click Builds
ss = rtwprivate('getSourceSubsystemHandle',codeInfo.GraphicalPath);
% Check if Rt-Click build, then re-map SIDs
if ~isempty(ss) && rtwprivate('rtwattic','hasSIDMap')
   codeInfo = modifyCodeInfoForSubsystemBuild(ss, codeInfo);
end

fr.writeFunctionInterfaces(codeInfo);
fr.writeServerCallPoints(codeInfo);

  lookupTableArray = [];         
  if exist('expInports', 'var')
    save codeInfo.mat codeInfo expInports lookupTableArray;
  else
    save codeInfo.mat codeInfo lookupTableArray;
  end
returnVal = 1;

% End Function: writeCodeInfoFcn

function data = uniquifyDataAccess(list)
  data = RTW.DataInterface.empty;
  for idx=1:numel(list)
      if ~isPresentDI(data, list(idx))
          data(end+1) = list(idx); %#ok<AGROW>
      end
  end
% End Function: uniquifyDataAccess
        
function isPresent = isPresentDI(list, di)
  isPresent = false;
  for idx = 1:numel(list)
    if isequal(list(idx), di)
      isPresent = true;
      break
    end
  end

function idx = getIndexFromTimingInternalId(internalIdVec, internalId)
 idx = find(internalIdVec == internalId);
 if (isempty(idx) || (length(idx) > 1))
    ciMsg = 'Time object cannot be empty'; 
    ciExc = MException('RTW:buildProcess:CodeInfoInternalError',ciMsg);
    throw(ciExc);
  end
% End Function: getIndexFromTimingInternalId

function checkDataGraphicalNames(ciName, rtwName)
  if (strcmp(ciName, rtwName) ~= 1)
    ciMsg = ['Name mismatch: ', ciName, ' and ', rtwName]; 
    ciExc = MException('RTW:buildProcess:CodeInfoInternalError',ciMsg);
    throw(ciExc);
  end
% End Function: checkDataGraphicalNames

function iData = getInternalDataByName(iDataVec, iDataName)
 iData = RTW.DataInterface.empty;
 for idxData = 1:numel(iDataVec)
    if strcmp(iDataName, iDataVec(idxData).GraphicalName)
       iData(end+1) = iDataVec(idxData);
       break
    end
 end
 if (isempty(iData) || (length(iData) > 1))
    ciMsg = 'Internal Data object cannot be empty'; 
    ciExc = MException('RTW:buildProcess:CodeInfoInternalError',ciMsg);
    throw(ciExc);
  end
% End Function: getInternalDataByName

function iData = getInternalDataByVariableName(iDataVec, iDataVariableName)
 iData = RTW.DataInterface.empty;
 for idxData = 1:numel(iDataVec)
    if strcmp(iDataVariableName, iDataVec(idxData).Implementation.VariableName)
       iData = iDataVec(idxData);
       break
    end
 end
 if isempty(iData)
    ciMsg = 'Internal Data object cannot be empty'; 
    ciExc = MException('RTW:buildProcess:CodeInfoInternalError',ciMsg);
    throw(ciExc);
  end
% End Function: getInternalDataByVariableName

function paramIndex = getParamIndexFromGraphicalName(iParamVec, graphicalName)
  paramIndex = [];
  for idxData = 1:numel(iParamVec)
    if strcmp(graphicalName, iParamVec(idxData).GraphicalName)
       paramIndex = idxData;
       break
    end
  end
% End Function: getParamIndexFromGraphicalName

function codeInfo = modifyCodeInfoForSubsystemBuild(ss, codeInfo)
    
% Extract Subsystem Build Map from AtticData
    Subsystem_Build_Mapping = rtwprivate('rtwattic','getSIDMap');

% Parameters
    for i = 1:length(codeInfo.Parameters)
        sid = codeInfo.Parameters(i).SID;        

        sid = Simulink.ID.getSubsystemBuildSID(sid,ss, Subsystem_Build_Mapping);
        codeInfo.Parameters(i).SID = sid;        
    end
    
% Data Stores
     for i = 1:length(codeInfo.DataStores)
         sid = codeInfo.DataStores(i).SID;         

         sid = Simulink.ID.getSubsystemBuildSID(sid,ss, Subsystem_Build_Mapping);
         codeInfo.DataStores(i).SID = sid;
     end
    
% Inports
    for i = 1:length(codeInfo.Inports)
        sid = codeInfo.Inports(i).SID;
        
        sid = Simulink.ID.getSubsystemBuildSID(sid,ss, Subsystem_Build_Mapping);
        codeInfo.Inports(i).SID = sid;
    end
    
% Outports
    for i = 1:length(codeInfo.Outports)
        sid = codeInfo.Outports(i).SID;
 
        sid = Simulink.ID.getSubsystemBuildSID(sid,ss, Subsystem_Build_Mapping);
        codeInfo.Outports(i).SID = sid;
    end    


